"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decryptSync = exports.decryptWithSharedKeySync = exports.encryptSync = exports.encryptWithSharedKeySync = void 0;
const iso_crypto_1 = require("@pedrouid/iso-crypto");
const enc_utils_1 = require("enc-utils");
const shared_1 = require("./shared");
function getEciesKeysSync(sharedKey) {
    const hash = iso_crypto_1.sha512Sync(sharedKey);
    return { encryptionKey: shared_1.getEncryptionKey(hash), macKey: shared_1.getMacKey(hash) };
}
function encryptWithSharedKeySync(msg, sharedKey, publicKey, iv = iso_crypto_1.randomBytes(iso_crypto_1.IV_LENGTH)) {
    const { encryptionKey, macKey } = getEciesKeysSync(sharedKey);
    const ciphertext = iso_crypto_1.aesCbcEncryptSync(iv, encryptionKey, msg);
    const dataToMac = enc_utils_1.concatArrays(iv, publicKey, ciphertext);
    const mac = iso_crypto_1.hmacSha256SignSync(macKey, dataToMac);
    return shared_1.serialize({ iv, publicKey, ciphertext, mac });
}
exports.encryptWithSharedKeySync = encryptWithSharedKeySync;
function encryptSync(msg, receiverPublicKey, opts) {
    const { publicKey, privateKey } = shared_1.getSenderKeyPair(opts);
    const sharedKey = shared_1.getSharedKey(privateKey, receiverPublicKey);
    return encryptWithSharedKeySync(msg, sharedKey, publicKey, opts === null || opts === void 0 ? void 0 : opts.iv);
}
exports.encryptSync = encryptSync;
function decryptWithSharedKeySync(encrypted, sharedKey) {
    const { iv, publicKey, mac, ciphertext } = shared_1.deserialize(encrypted);
    const { encryptionKey, macKey } = getEciesKeysSync(sharedKey);
    const dataToMac = enc_utils_1.concatArrays(iv, publicKey, ciphertext);
    const macTest = iso_crypto_1.hmacSha256VerifySync(macKey, dataToMac, mac);
    iso_crypto_1.assert(macTest, iso_crypto_1.ERROR_BAD_MAC);
    const msg = iso_crypto_1.aesCbcDecryptSync(iv, encryptionKey, ciphertext);
    return msg;
}
exports.decryptWithSharedKeySync = decryptWithSharedKeySync;
function decryptSync(encrypted, privateKey) {
    const { publicKey } = shared_1.deserialize(encrypted);
    const sharedKey = shared_1.getSharedKey(privateKey, publicKey);
    return decryptWithSharedKeySync(encrypted, sharedKey);
}
exports.decryptSync = decryptSync;
//# sourceMappingURL=sync.js.map