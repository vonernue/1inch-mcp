"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitMask = void 0;
const assert_1 = __importDefault(require("assert"));
/**
 * Class to define bit mask: new BitMask(16, 32) is for bits from [16, 32) => 0xffff0000
 *
 * @see BN.getMask
 * @see BN.setMask
 * @see BN.clearMask
 */
class BitMask {
    /**
     * @example
     * const mask1 = new BitMask(0, 16) // for bits from [0, 16) => 0xffff
     * const mask2 = new BitMask(16, 32) // for bits from [16, 32) => 0xffff0000
     * const singleBit = new BitMask(10) // for 10th bit [10, 11)
     *
     * @param startBit bit position from the lowest bit, starts from zero, inclusive
     * @param endBit bit position from the lowest bit, starts from zero, exclusive. Must be bigger than `startBit`
     */
    constructor(startBit, endBit = startBit + 1n) {
        (0, assert_1.default)(startBit < endBit, 'BitMask: startBit must be less than endBit');
        this.offset = startBit;
        this.mask = (1n << (endBit - startBit)) - 1n;
    }
    toString() {
        return '0x' + this.toBigInt().toString(16);
    }
    toBigInt() {
        return this.mask << this.offset;
    }
}
exports.BitMask = BitMask;
//# sourceMappingURL=bit-mask.js.map