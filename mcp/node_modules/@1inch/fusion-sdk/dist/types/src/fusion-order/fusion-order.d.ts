import { Address, EIP712TypedData, Extension, LimitOrderV4Struct, OrderInfoData } from '@1inch/limit-order-sdk';
import { Fees } from '@1inch/limit-order-sdk/extensions/fee-taker';
import { FusionExtension } from './fusion-extension';
import { AuctionDetails } from './auction-details';
import { Whitelist } from './whitelist/whitelist';
import { AuctionCalculator } from '../amount-calculator/auction-calculator';
import { AmountCalculator } from '../amount-calculator/amount-calculator';
export declare class FusionOrder {
    readonly settlementExtensionContract: Address;
    private static defaultExtra;
    readonly fusionExtension: FusionExtension;
    private inner;
    protected constructor(settlementExtensionContract: Address, orderInfo: OrderInfoData, auctionDetails: AuctionDetails, whitelist: Whitelist, extra?: {
        unwrapWETH?: boolean;
        nonce?: bigint;
        permit?: string;
        allowPartialFills?: boolean;
        allowMultipleFills?: boolean;
        orderExpirationDelay?: bigint;
        enablePermit2?: boolean;
        source?: string;
        fees?: Fees;
    }, extension?: FusionExtension);
    get extension(): Extension;
    get maker(): Address;
    get takerAsset(): Address;
    get makerAsset(): Address;
    get takingAmount(): bigint;
    get makingAmount(): bigint;
    get realReceiver(): Address;
    get receiver(): Address;
    get deadline(): bigint;
    get auctionStartTime(): bigint;
    get auctionEndTime(): bigint;
    get isBitInvalidatorMode(): boolean;
    get partialFillAllowed(): boolean;
    get multipleFillsAllowed(): boolean;
    get nonce(): bigint;
    get salt(): bigint;
    static new(settlementExtension: Address, orderInfo: OrderInfoData, details: {
        auction: AuctionDetails;
        whitelist: Whitelist;
    }, extra?: {
        unwrapWETH?: boolean;
        nonce?: bigint;
        permit?: string;
        allowPartialFills?: boolean;
        allowMultipleFills?: boolean;
        orderExpirationDelay?: bigint;
        enablePermit2?: boolean;
        source?: string;
        fees?: Fees;
    }): FusionOrder;
    static fromDataAndExtension(order: LimitOrderV4Struct, extension: Extension): FusionOrder;
    build(): LimitOrderV4Struct;
    getOrderHash(chainId: number): string;
    getTypedData(chainId: number): EIP712TypedData;
    getCalculator(): AuctionCalculator;
    calcTakingAmount(taker: Address, makingAmount: bigint, time: bigint, blockBaseFee?: bigint): bigint;
    getUserReceiveAmount(taker: Address, makingAmount: bigint, time: bigint, blockBaseFee?: bigint): bigint;
    getResolverFee(taker: Address, time: bigint, blockBaseFee?: bigint, makingAmount?: bigint): bigint;
    getIntegratorFee(taker: Address, time: bigint, blockBaseFee?: bigint, makingAmount?: bigint): bigint;
    getProtocolShareOfIntegratorFee(taker: Address, time: bigint, blockBaseFee?: bigint, makingAmount?: bigint): bigint;
    getProtocolFee(taker: Address, time: bigint, blockBaseFee?: bigint, makingAmount?: bigint): bigint;
    canExecuteAt(executor: Address, executionTime: bigint): boolean;
    isExpiredAt(time: bigint): boolean;
    isExclusiveResolver(wallet: Address): boolean;
    isExclusivityPeriod(time?: bigint): boolean;
    getAmountCalculator(): AmountCalculator;
}
