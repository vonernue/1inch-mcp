/**
 * Class to define bit mask: new BitMask(16, 32) is for bits from [16, 32) => 0xffff0000
 *
 * @see BN.getMask
 * @see BN.setMask
 * @see BN.clearMask
 */
export declare class BitMask {
    readonly offset: bigint;
    readonly mask: bigint;
    /**
     * @example
     * const mask1 = new BitMask(0, 16) // for bits from [0, 16) => 0xffff
     * const mask2 = new BitMask(16, 32) // for bits from [16, 32) => 0xffff0000
     * const singleBit = new BitMask(10) // for 10th bit [10, 11)
     *
     * @param startBit bit position from the lowest bit, starts from zero, inclusive
     * @param endBit bit position from the lowest bit, starts from zero, exclusive. Must be bigger than `startBit`
     */
    constructor(startBit: bigint, endBit?: bigint);
    toString(): string;
    toBigInt(): bigint;
}
