declare enum Side {
    Front = 0,
    Back = 1
}
/**
 * Class to iterate through bytes string by parsing individual bytes
 *
 * @example
 * const iter = BytesIter.BigInt('0xdeadbeef')
 * iter.nextByte() == BigInt(0xde)
 * iter.nextByte() == BigInt(0xad)
 * iter.nextBytes(2) == BigInt(0xbeef)
 */
export declare class BytesIter<T> {
    private readonly ResultType;
    static SIDE: typeof Side;
    private bytes;
    private constructor();
    static BigInt(bytes: string): BytesIter<bigint>;
    static String(bytes: string): BytesIter<string>;
    /**
     * Returns all not consumed bytes
     */
    rest(): T;
    isEmpty(): boolean;
    nextByte(side?: Side): T;
    nextBytes(n: number, side?: Side): T;
    nextAddress(side?: Side): T;
    nextUint8(side?: Side): T;
    nextUint16(side?: Side): T;
    nextUint24(side?: Side): T;
    nextUint32(side?: Side): T;
    nextUint128(side?: Side): T;
    nextUint160(side?: Side): T;
    nextUint256(side?: Side): T;
}
export {};
